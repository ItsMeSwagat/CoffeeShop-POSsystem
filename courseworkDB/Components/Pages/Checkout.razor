@attribute [Route(Checkout.route)]
@using MudBlazor
@using courseworkDB.Services

@inject OrderService orderService
@inject MembershipService membershipService
@inject CoffeeService coffeeService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<h3>Checkout</h3>

<div class=" d-flex w-100 h-100 gap-5">
    <div>
        <h4>Your Cart</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Coffee Type</th>
                    <th>Add-Ins</th>
                    <th>Quantity</th>
                    <th>Total Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cartItem in coffeeService.Cart)
                {
                    <tr>
                        <td>@cartItem.CoffeeType.Name</td>
                        <td>
                            @foreach (var addIn in cartItem.SelectedAddIns)
                            {
                                <p>@addIn.Name</p>
                            }
                        </td>
                        <td>@cartItem.Quantity</td>
                        <td>Rs @cartItem.TotalPrice.ToString()</td>
                        
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3" style="text-align: right;">Grand Total:</td>
                    <td>Rs @coffeeService.GrandTotal.ToString()</td>
                </tr>
                <tr>
                    <MudButton Color="Color.Tertiary" type="submit" Variant="Variant.Filled" Style=" border-radius: 5px; height: 3rem; font-size:1.2rem; margin-top: 1rem;" @onclick="() => ProcessOrder(coffeeService.Cart, Username)" disabled="@string.IsNullOrWhiteSpace(Username)">ORDER</MudButton>

                </tr>
            </tfoot>
            
        </table>
    </div>
    <div class="">
        
            <MudInputLabel Style=" font-family: Poppins; font-weight: bolder; font-size: 1.3rem;">Membership</MudInputLabel>
            <InputText @bind-Value="Username" type="text" placeholder="Enter UserName/Phone Number" class=" input-group-text" style=" outline: none; border-radius: 5px; font-size: 1.2rem; height: 3rem; width: 20rem;" />
            
            <MudButton Color="Color.Tertiary" type="submit" Variant="Variant.Filled" Style=" border-radius: 5px; height: 3rem; font-size:1.2rem; margin-top: 1rem;" @onclick="CheckMembership">CHECK MEMBERSHIP</MudButton>
        
    </div>
</div>

@code {
    public const string route = "/checkout";
    private string Username = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string orderSuccessMessage = string.Empty;


    private void CreateMembership(string customerUsername)
    {
        // Create a new membership for the customer
        membershipService.CreateMembership(customerUsername);


    }

    private void CheckMembership()
    {
        var customerUsername = Username;
        var hasMembership = membershipService.Memberships.Any(m => m.CustomerUsername.ToLower() == customerUsername.ToLower());

        if (hasMembership)
        {
            var membership = membershipService.Memberships.First(m => m.CustomerUsername.ToLower() == customerUsername.ToLower());

            bool isRegularMember = membership.IsRegularMember;

            membership.PurchaseCount++;
            membership.LastPurchaseDate = DateTime.Now;

            if (isRegularMember)
            {
                ApplyRegularMemberDiscount();
                
                
            }

            if (membership.PurchaseCount >= 10)
            {
                
                RedeemComplimentaryCoffee();
                
                
            }
            else
            {
                errorMessage = "You are not the regular Member and discount has not been applied.Thank you";

                Snackbar.Add(errorMessage, Severity.Error);

               

            }
            successMessage = "Membership Found. Thank you";
            Snackbar.Add(successMessage, Severity.Success);
            membershipService.SaveData();
        }
        else
        {  
            errorMessage = "Membership Not Found!! Creating New Membership. Thank you";

            CreateMembership(customerUsername);
            
            Snackbar.Add(errorMessage, Severity.Error);


        }
    }

    private void ProcessOrder(List<CoffeeService.CartItem> cartItems, string customerUsername)
    {
        // Call the ProcessOrder method in the OrderService
        orderService.ProcessOrder(cartItems, customerUsername);

        // Clear the cart
        coffeeService.ResetCart();

        // Navigate to the dashboard
        NavManager.NavigateTo("/dashboard");

        Snackbar.Add("Order Placed. Thank you for your purchase!", Severity.Success);
    }


    private void ApplyRegularMemberDiscount()
    {
        membershipService.ApplyRegularMemberDiscount();
        Snackbar.Add("Regular membership 10% discount haas been provided. Thank you");
    }

    private void RedeemComplimentaryCoffee()
    {
        membershipService.RedeemComplimentaryCoffee();
        Snackbar.Add("Complimentary coffee has been Added. Thank you.");
    }
}
